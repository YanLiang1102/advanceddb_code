//******************************************************************************
// Copyright (C) 2016 University of Oklahoma Board of Trustees.
//******************************************************************************
// Last modified: Tue Feb  9 20:33:16 2016 by Chris Weaver
//******************************************************************************
// Major Modification History:
//
// 20160209 [weaver]:	Original file.
//
//******************************************************************************
// Notes:
//
//******************************************************************************

package edu.ou.cs.cg.homework;

//import java.lang.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.util.Random;
import javax.swing.*;
import javax.media.opengl.*;
import javax.media.opengl.awt.GLCanvas;
import javax.media.opengl.glu.*;
import com.jogamp.opengl.util.*;
import com.jogamp.opengl.util.awt.TextRenderer;
import com.jogamp.opengl.util.gl2.GLUT;

//******************************************************************************

/**
 * The <CODE>Homework02</CODE> class.<P>
 *
 * @author  Yan Liang
 * @version %I%, %G%
 */
public final class Homework02
	implements GLEventListener
{
	//**********************************************************************
	// Public Class Members
	//**********************************************************************

	public static final GLU		GLU = new GLU();
	public static final GLUT	GLUT = new GLUT();
	public static final Random	RANDOM = new Random();

	//**********************************************************************
	// Private Members
	//**********************************************************************

	// State (internal) variables
	private int				k = 0;		// Just an animation counter

	private int				w;			// Canvas width
	private int				h;			// Canvas height
	private TextRenderer	renderer;

	//**********************************************************************
	// Main
	//**********************************************************************

	public static void main(String[] args)
	{
		GLProfile		profile = GLProfile.getDefault();
		GLCapabilities	capabilities = new GLCapabilities(profile);
		GLCanvas		canvas = new GLCanvas(capabilities);
		JFrame			frame = new JFrame("Homework02");

		canvas.setPreferredSize(new Dimension(1500,800));

		frame.setBounds(50, 50, 600, 600);
		frame.getContentPane().add(canvas);
		frame.pack();
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       // frame.setBackground(Color.WHITE);
		frame.addWindowListener(new WindowAdapter() {
				public void windowClosing(WindowEvent e) {
					System.exit(0);
				}
			});

		canvas.addGLEventListener(new Homework02());
		//canvas.glClear();
		//canvas.setColor(0.0f,1.0f,0.0f,0.0F);

		//turn off the animation for now.
		//FPSAnimator		animator = new FPSAnimator(canvas, 60);

		//animator.start();
	}

	//**********************************************************************
	// Override Methods (GLEventListener)
	//**********************************************************************

	public void		init(GLAutoDrawable drawable)
	{
		w = drawable.getWidth();
		h = drawable.getHeight();
        
		renderer = new TextRenderer(new Font("Serif", Font.PLAIN, 18),
									true, true);
	}

	public void		dispose(GLAutoDrawable drawable)
	{
		renderer = null;
	}

	public void		display(GLAutoDrawable drawable)
	{
		update();
		render(drawable);
	}

	public void		reshape(GLAutoDrawable drawable, int x, int y, int w, int h)
	{
		this.w = w;
		this.h = h;
	}

	//**********************************************************************
	// Private Methods (Rendering)
	//**********************************************************************

	private void	update()
	{
		k++;									// Counters are useful, right?
	}

	private void	render(GLAutoDrawable drawable)
	{
		GL2		gl = drawable.getGL().getGL2();
        gl.glClearColor(0.573f, 0.573f, 0.573f, 1.0f);
		gl.glClear(GL.GL_COLOR_BUFFER_BIT);		// Clear the buffer

		//setProjection(gl);						// Use a coordinate system

		drawSomething(gl);						// Draw something
		drawSomeText(drawable);					// Draw some text
	}

	//**********************************************************************
	// Private Methods (Coordinate System)
	//**********************************************************************

	private void	setProjection(GL2 gl)
	{
		GLU		glu = new GLU();

		gl.glMatrixMode(GL2.GL_PROJECTION);			// Prepare for matrix xform
		gl.glLoadIdentity();						// Set to identity matrix
		glu.gluOrtho2D(-1.0f, 1.0f, -1.0f, 1.0f);	// 2D translate and scale
	}

	//**********************************************************************
	// Private Methods (Scene)
	//**********************************************************************

	// This page is helpful (scroll down to "Drawing Lines and Polygons"):
	// http://www.linuxfocus.org/English/January1998/article17.html
	private void	drawSomething(GL2 gl)
	{
		gl.glBegin(GL.GL_POINTS);

		gl.glColor3f(1.0f, 1.0f, 1.0f);
		gl.glPointSize(2.0f);
		gl.glVertex2d(0.0, 0.0);
		gl.glEnd();
      
      //need to be changed with the campus width and  height
	  float ratio=(float)(1500.0f/800.0f);
      int numberOfLines=25;
      for(int i=0;i<=numberOfLines;i++)
      {
      	gl.glBegin(GL2.GL_LINES);
      	//need to do this cast in order to make this work.
      	float x1=(float)(-0.98f+(2.0/numberOfLines*i));
      	float x2=(float)(-0.98f+(2.0/numberOfLines*(i+0.65)));
      	gl.glVertex2f(x1,-1.0f);
      	gl.glVertex2f(x2,-0.8f);
      	gl.glEnd();

      }
      //draw the line on the top and draw the line on the bottom, and if nothing has been set up the line is going to be look like white
      gl.glBegin(GL2.GL_LINES);
  	  gl.glVertex2f(-1.0f,-1.0f);
  	  gl.glVertex2f(1.0f,-1.0f);
  	  gl.glEnd();
      float bound1=-0.8f;
  	  gl.glBegin(GL2.GL_LINES);
  	  gl.glVertex2f(-1.0f,bound1);
  	  gl.glVertex2f(1.0f,bound1);
  	  gl.glEnd();

  	  //seperate the width to be 11 sections
  	  int sections=11;



  	float width=0.042f;
  	float leftheight=0.3f;
  	float rightheight=.35f;
  	float start1=-0.98f;
  	float offset1=0.01f;
  	//float heightstart1=

    for(int i=0;i<4;i++)
    {
        gl.glColor3f(1.0f,1.0f,1.0f);	
    	drawPolygon(gl,(float)(start1+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    	drawPolyBoundary(gl,(float)(start1+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    }
    
    //set up the first house , need to set the color white
    gl.glColor3f(1.0f,1.0f,1.0f);	
    float start2=(float)(start1+4*width+offset1);
    float housewidth=(float)(6.0*width);
    float househeight=(float)(10.0*width);
    gl.glColor3f((float)(82/255.0),(float)(81.0/255.0),(float)(0.0/255.0));
    drawPolygon(gl,start2,bound1+offset1,househeight, househeight,housewidth);
    gl.glColor3f((float)(75.0/255.0),(float)(61.0/255.0),(float)(32.0/255.0));
    drawTriangle(gl,start2,bound1+offset1+househeight,housewidth,househeight*0.55f);
    //now set the color back to black
    gl.glColor3f(0.0f,0.0f,0.0f);
    //draw the line on the top of the house
    //there are altogethe
    float house1x=0.0f;
    float house1y=bound1+offset1+househeight;
    for(int i=0;i<=5;i++)
    {
    	house1x=(float)(start2+housewidth/5.0*i);
    	gl.glBegin(GL2.GL_LINES);
	  	gl.glVertex2f(house1x,house1y);
	  	gl.glVertex2f((float)(start2+housewidth/2.0),house1y+househeight*0.55f);
	  	  //gl.glColor3f(0.0f,0.0f,0.0f);
	  	gl.glEnd();

    }
    //now need to draw the door of the first house
     gl.glColor3f((float)(209.0/255.0),(float)(148.0/255.0),(float)(5.0/255.0));
     float startdoor1=(float)(start2+0.25f*housewidth);
     drawPolygon(gl,startdoor1,bound1+offset1,(float)(0.6*househeight),(float)(0.6*househeight),(float)(0.22*housewidth));
     //need to draw the handle on teh door
     gl.glColor3f(1.0f,1.0f,1.0f);
     drawFilledCircle(gl,startdoor1+0.05f*housewidth,bound1+offset1+0.3f*househeight,0.03f*housewidth,ratio);
    //ok now the first house is done, need to draw another two fences.
     //now need to draw the bound of the circle
     gl.glColor3f(0.0f,0.0f,0.0f);
     drawHollowCircle(gl,startdoor1+0.05f*housewidth,bound1+offset1+0.3f*househeight,0.03f*housewidth,ratio);

     //need to draw the chimney on top of the house
     //find the triangle the top vertex and the right vertex
     float topx=(float)(start2+0.5f*housewidth);
     //adds in the triangle height too.
     float topy=(float)(bound1+offset1+househeight*1.55f);
     float rightx=(float)(start2+housewidth);
     float righty=(float)(bound1+offset1+househeight);

     //the first x on the triangle will be 
     float chimx1=(float)(topx+(rightx-topx)*0.3333f);
     float chimx2=(float)(topx+(rightx-topx)*0.6666f);
     float chimy1=findYonTheLine(topx,topy,rightx,righty,chimx1);
     float chimy2=findYonTheLine(topx,topy,rightx,righty,chimx2);

     float topchimx1=chimx1;
     float topchimy1=topy;

     float chim1leftlength=findDistanceTwoPoints(topchimx1,topchimy1,chimx1,chimy1);
     float rightlengthOfTriangle=findDistanceTwoPoints(topx,topy,rightx,righty);
     float bottomlengthOfchimney=findDistanceTwoPoints(chimx1,chimy1,chimx2,chimy2);
     float chimrightlength=chim1leftlength+(float)((bottomlengthOfchimney/rightlengthOfTriangle)*househeight*0.55f);
     float chimneywidth=(float)((bottomlengthOfchimney/rightlengthOfTriangle)*0.5f*housewidth);
     gl.glColor3f((float)(153.0/255.0),(float)(15.0/255.0),(float)(0/255.0));
     //the trick here is that I can set the leftheight and rigfht height to be negative.
     drawPolygon(gl,topchimx1,topchimy1,-1.0f*chim1leftlength,-1.0f*chimrightlength,chimneywidth);
     //draw the boundary of the polygon
     gl.glColor3f(0.0f,0.0f,0.0f);
     drawPolyBoundary(gl,topchimx1,topchimy1,-1.0f*chim1leftlength,-1.0f*chimrightlength,chimneywidth);

     //now need to draw the smoke on top of the chimney.
     //ok the chimney is the hard part to drwa since u can not direcly draw it, the whole thing is not convex.
     float s1=topchimx1+0.1f*chimneywidth;
     float s2=topchimy1;
     float s3=s1;
     float s4=s2+0.7f*chimneywidth;
     float s27=s1+0.8f*chimneywidth;
     float s28=s2;
     float s25=s27;
     float s26=s4+0.2f*chimneywidth;
     float s5=s3+0.2f*chimneywidth;
     float s6=s4+0.2f*chimneywidth;
     float s7=s5+0.1f*chimneywidth;
     float s8=s6+chimneywidth;
     float s23=s25+0.2f*chimneywidth;
     float s24=s26+0.4f*chimneywidth;
     float s21=s23-0.3f*chimneywidth;
     float s22=s24+0.6f*chimneywidth;
     float s9=s7-0.2f*chimneywidth;
     float s10=s8+0.35f*chimneywidth;
     float s19=s21+0.1f*chimneywidth;
     float s20=s22+0.35f*chimneywidth;
     float s11=s1+0.6f*chimneywidth;
     float s12=s10+1.8f*chimneywidth;
     float s17=s19;
     float s18=s20+0.5f*chimneywidth;
     float s15=s17+0.1f*chimneywidth;
     float s16=s18+0.8f*chimneywidth;
     float s13=s11+0.2f*chimneywidth;
     float s14=s12;









     gl.glColor3f((float)(174.0/255.0),(float)(173/255.0),(float)(169/255.0));
     gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s1,s2);
  	    gl.glVertex2f(s27,s28);
  	    gl.glVertex2f(s25,s26);
  	    gl.glVertex2f(s3,s4);
  	    gl.glEnd();

  	    gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s3,s4);
  	    gl.glVertex2f(s25,s26);
  	    gl.glVertex2f(s5,s6);
  	    gl.glEnd();

  	      gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s5,s6);
  	    gl.glVertex2f(s25,s26);
  	    gl.glVertex2f(s23,s24);
  	     gl.glVertex2f(s7,s8);
  	    gl.glEnd();

  	      gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s7,s8);
  	    gl.glVertex2f(s23,s24);
  	    gl.glVertex2f(s21,s22);
  	    gl.glEnd();

  	        gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s7,s8);
  	    gl.glVertex2f(s21,s22);
  	    gl.glVertex2f(s19,s20);
  	     gl.glVertex2f(s9,s10);
  	    gl.glEnd();

  	         gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s9,s10);
  	    gl.glVertex2f(s19,s20);
  	    gl.glVertex2f(s17,s18);
  	    gl.glEnd();

  	         gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s9,s10);
  	    gl.glVertex2f(s17,s18);
  	    gl.glVertex2f(s11,s12);
  	    gl.glEnd();

  	    gl.glBegin(GL2.GL_POLYGON);
  	    gl.glVertex2f(s11,s12);
  	    gl.glVertex2f(s17,s18);
  	    gl.glVertex2f(s15,s16);
  	     gl.glVertex2f(s13,s14);
  	    gl.glEnd();








    float start3=(float)(start2+offset1+housewidth);
       for(int i=0;i<4;i++)
    {
        gl.glColor3f(1.0f,1.0f,1.0f);	
    	drawPolygon(gl,(float)(start3+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    	drawPolyBoundary(gl,(float)(start3+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    }
     
     //the diff now is the width of the fence instead of width of the house.
      float start4=(float)(start3+offset1+4*width);
       for(int i=0;i<4;i++)
    {
        gl.glColor3f(1.0f,1.0f,1.0f);	
    	drawPolygon(gl,(float)(start4+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    	drawPolyBoundary(gl,(float)(start4+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    }

    //draw the house in the middle
    float start5=start4+8*width+offset1;
    //the second house is little bit upper, so
    float offset2=0.06f;
    //set the color back;
    gl.glColor3f(1.0f,1.0f,1.0f);
    drawPolygon(gl,start5,bound1+offset2,househeight, househeight,housewidth);
    

    //now need to draw 8 pieces of fences
     float start6=(float)(start5+width+housewidth);
       for(int i=1;i<=8;i++)
    {
        gl.glColor3f(1.0f,1.0f,1.0f);	
        if(i%2==0)
        {
        	//if i is even, then the rigfht height is less than the left height.
        	drawPolygon(gl,(float)(start6+i*width
    		),bound1+offset1,rightheight,leftheight,width);
    	drawPolyBoundary(gl,(float)(start6+i*width
    		),bound1+offset1,rightheight,leftheight,width);

        	continue;
        }
    	drawPolygon(gl,(float)(start6+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    	drawPolyBoundary(gl,(float)(start6+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    }

    //now need to draw the last house, the last house is right adjacent to the fence
    gl.glColor3f(1.0f,1.0f,1.0f);	
    float start7=start6+9*width;
    drawPolygon(gl,start7,bound1+offset1,househeight, househeight,housewidth);

    //now need to draw the last fence
    float start8=(float)(start7+housewidth-width); //since the index start from 1.
       for(int i=1;i<=2;i++)
    {
        gl.glColor3f(1.0f,1.0f,1.0f);	
        if(i%2==0)
        {
        	//if i is even, then the rigfht height is less than the left height.
        	drawPolygon(gl,(float)(start8+i*width
    		),bound1+offset1,rightheight,leftheight,width);
    	drawPolyBoundary(gl,(float)(start8+i*width
    		),bound1+offset1,rightheight,leftheight,width);

        	continue;
        }
    	drawPolygon(gl,(float)(start8+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    	drawPolyBoundary(gl,(float)(start8+i*width
    		),bound1+offset1,leftheight,rightheight,width);
    }
    
     float offset3=0.04f;
    // drawCircle(gl);
    // drawFilledCircle(gl,0.5f,0.5f,0.1f,ratio);



	}


    private void drawHollowCircle(GL2 gl,float x, float y, float radius,float ratio){
		int i;
		int lineAmount = 100; //# of triangles used to draw circle
		
		//GLfloat radius = 0.8f; //radius
		float twicePi = 2.0f * 3.1415926f;
		
		gl.glBegin(GL2.GL_LINE_LOOP);
			for(i = 0; i <= lineAmount;i++) { 
				gl.glVertex2f(
				    (float)(x + (radius * Math.cos(i *  twicePi / lineAmount))), 
				    (float)(y + (radius* Math.sin(i * twicePi / lineAmount)*ratio))
				);
			}
		gl.glEnd();
    }

    private float findDistanceTwoPoints(float x1,float y1, float x2, float y2)
    {
    	return (float)(Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));
    }
    
    private void drawFilledCircle(GL2 gl,float x, float y, float radius,float ratio){
			int i;
			int triangleAmount = 20; //# of triangles used to draw circle
			
			//GLfloat radius = 0.8f; //radius
			float twicePi = 2.0f * 3.1415926f;
			
			gl.glBegin(GL2.GL_TRIANGLE_FAN);
				gl.glVertex2f(x, y); // center of circle
				for(i = 0; i <= triangleAmount;i++) { 
					gl.glVertex2f(
				            (float)(x + (radius * Math.cos(i *  twicePi / triangleAmount))), 
				            //ok the ratio should be applied here.
					    (float)(y + (radius * Math.sin(i * twicePi / triangleAmount))*ratio)
					);
				}
			gl.glEnd();
    }

    private float findYonTheLine(float x1, float y1,float x2,float y2,float x)
    {
    	return (float)(y2+(y2-y1)/(x2-x1)*(x-x2));
    }

	private void drawPolyBoundary(GL2 gl,float f1, float f2, float leftheight, float rightheight, float width)
	{
		  gl.glBegin(GL2.GL_LINES);
		  float f3=f1+width;
		  float f4=f2;
		  float f5=f3;
		  float f6=f2+rightheight;
		  float f7=f1;
		  float f8=f2+leftheight;
	  	  gl.glVertex2f(f1,f2);
	  	  gl.glVertex2f(f3,f4);
	  	  gl.glColor3f(0.0f,0.0f,0.0f);
	  	  gl.glEnd();

	  	  gl.glBegin(GL2.GL_LINES);
	  	  gl.glVertex2f(f3,f4);
	  	  gl.glVertex2f(f5,f6);
	  	  //gl.glColor3f(0.0f,0.0f,0.0f);
	  	  gl.glEnd();

	  	  gl.glBegin(GL2.GL_LINES);
	  	  gl.glVertex2f(f5,f6);
	  	  gl.glVertex2f(f7,f8);
	  	  //gl.glColor3f(0.0f,0.0f,0.0f);
	  	  gl.glEnd();

	  	  gl.glBegin(GL2.GL_LINES);
	  	  gl.glVertex2f(f7,f8);
	  	  gl.glVertex2f(f1,f2);
	  	  //gl.glColor3f(0.0f,0.0f,0.0f);
	  	  gl.glEnd();
	}
    //this is in counterclock posituon, using the start point to generate the polygon,(f1,f2) is the position of the bottom left.
    //this actually draw a rectangle instead of drawing whatever number of the stuff.
	private void drawPolygon(GL2 gl,float f1, float f2, float leftheight, float rightheight, float width)
	{
		gl.glBegin(GL2.GL_POLYGON);
		float f3=f1+width;
		float f4=f2;
		float f5=f3;
		float f6=f2+rightheight;
		float f7=f1;
		float f8=f2+leftheight;
  	    gl.glVertex2f(f1,f2);
  	    gl.glVertex2f(f3,f4);
  	    gl.glVertex2f(f5,f6);
  	    gl.glVertex2f(f7,f8);
  	    gl.glEnd();
		  	  
	}

	//draw a "regular" triangle with the point on the bottom left and the length of the bvottom of the triangle and the height of the triangle.
	private void drawTriangle(GL2 gl, float f1, float f2,float width,float height)
	{
		gl.glBegin(GL2.GL_POLYGON);
		float f3=f1+width;
		float f4=f2;
		float f5=(float)(f1/2+f3/2);
		float f6=f2+height;
		gl.glVertex2f(f1,f2);
  	    gl.glVertex2f(f3,f4);
  	    gl.glVertex2f(f5,f6);
  	    gl.glEnd();
	}

	// This example on this page is long but helpful:
	// http://jogamp.org/jogl-demos/src/demos/j2d/FlyingText.java
	// Warning! Text is drawn in pixel coordinates, not projection coordinates.
	private void drawSomeText(GLAutoDrawable drawable)
	{
		renderer.beginRendering(drawable.getWidth(), drawable.getHeight());
		System.out.println("width: height:"+drawable.getWidth()+" "+drawable.getHeight());
		renderer.setColor(1.0f, 1.0f, 0, 1.0f);
		renderer.draw("This is a point", w/2 + 8, h/2 - 5);
		renderer.endRendering();
	}
}

//******************************************************************************
